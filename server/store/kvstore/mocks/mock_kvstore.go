// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-groups/server/store/kvstore (interfaces: KVStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-plugin-groups/server/model"
)

// MockKVStore is a mock of KVStore interface.
type MockKVStore struct {
	ctrl     *gomock.Controller
	recorder *MockKVStoreMockRecorder
}

// MockKVStoreMockRecorder is the mock recorder for MockKVStore.
type MockKVStoreMockRecorder struct {
	mock *MockKVStore
}

// NewMockKVStore creates a new mock instance.
func NewMockKVStore(ctrl *gomock.Controller) *MockKVStore {
	mock := &MockKVStore{ctrl: ctrl}
	mock.recorder = &MockKVStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVStore) EXPECT() *MockKVStoreMockRecorder {
	return m.recorder
}

// GetJWT mocks base method.
func (m *MockKVStore) GetJWT() (*model.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJWT")
	ret0, _ := ret[0].(*model.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJWT indicates an expected call of GetJWT.
func (mr *MockKVStoreMockRecorder) GetJWT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJWT", reflect.TypeOf((*MockKVStore)(nil).GetJWT))
}

// StoreJWT mocks base method.
func (m *MockKVStore) StoreJWT(arg0 *model.JWT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreJWT", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreJWT indicates an expected call of StoreJWT.
func (mr *MockKVStoreMockRecorder) StoreJWT(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreJWT", reflect.TypeOf((*MockKVStore)(nil).StoreJWT), arg0)
}
