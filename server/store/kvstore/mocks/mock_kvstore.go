// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-identity-groups-sync/server/store/kvstore (interfaces: KVStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-plugin-identity-groups-sync/server/model"
)

// MockKVStore is a mock of KVStore interface.
type MockKVStore struct {
	ctrl     *gomock.Controller
	recorder *MockKVStoreMockRecorder
}

// MockKVStoreMockRecorder is the mock recorder for MockKVStore.
type MockKVStoreMockRecorder struct {
	mock *MockKVStore
}

// NewMockKVStore creates a new mock instance.
func NewMockKVStore(ctrl *gomock.Controller) *MockKVStore {
	mock := &MockKVStore{ctrl: ctrl}
	mock.recorder = &MockKVStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVStore) EXPECT() *MockKVStoreMockRecorder {
	return m.recorder
}

// DeleteKeycloakGroupID mocks base method.
func (m *MockKVStore) DeleteKeycloakGroupID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeycloakGroupID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeycloakGroupID indicates an expected call of DeleteKeycloakGroupID.
func (mr *MockKVStoreMockRecorder) DeleteKeycloakGroupID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeycloakGroupID", reflect.TypeOf((*MockKVStore)(nil).DeleteKeycloakGroupID), arg0)
}

// DeleteKeycloakJWT mocks base method.
func (m *MockKVStore) DeleteKeycloakJWT() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeycloakJWT")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeycloakJWT indicates an expected call of DeleteKeycloakJWT.
func (mr *MockKVStoreMockRecorder) DeleteKeycloakJWT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeycloakJWT", reflect.TypeOf((*MockKVStore)(nil).DeleteKeycloakJWT))
}

// GetKeycloakGroupID mocks base method.
func (m *MockKVStore) GetKeycloakGroupID(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeycloakGroupID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeycloakGroupID indicates an expected call of GetKeycloakGroupID.
func (mr *MockKVStoreMockRecorder) GetKeycloakGroupID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeycloakGroupID", reflect.TypeOf((*MockKVStore)(nil).GetKeycloakGroupID), arg0)
}

// GetKeycloakJWT mocks base method.
func (m *MockKVStore) GetKeycloakJWT() (*model.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeycloakJWT")
	ret0, _ := ret[0].(*model.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeycloakJWT indicates an expected call of GetKeycloakJWT.
func (mr *MockKVStoreMockRecorder) GetKeycloakJWT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeycloakJWT", reflect.TypeOf((*MockKVStore)(nil).GetKeycloakJWT))
}

// ListKeycloakGroupIDs mocks base method.
func (m *MockKVStore) ListKeycloakGroupIDs() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeycloakGroupIDs")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeycloakGroupIDs indicates an expected call of ListKeycloakGroupIDs.
func (mr *MockKVStoreMockRecorder) ListKeycloakGroupIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeycloakGroupIDs", reflect.TypeOf((*MockKVStore)(nil).ListKeycloakGroupIDs))
}

// StoreKeycloakGroupID mocks base method.
func (m *MockKVStore) StoreKeycloakGroupID(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreKeycloakGroupID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreKeycloakGroupID indicates an expected call of StoreKeycloakGroupID.
func (mr *MockKVStoreMockRecorder) StoreKeycloakGroupID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreKeycloakGroupID", reflect.TypeOf((*MockKVStore)(nil).StoreKeycloakGroupID), arg0, arg1)
}

// StoreKeycloakJWT mocks base method.
func (m *MockKVStore) StoreKeycloakJWT(arg0 *model.JWT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreKeycloakJWT", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreKeycloakJWT indicates an expected call of StoreKeycloakJWT.
func (mr *MockKVStoreMockRecorder) StoreKeycloakJWT(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreKeycloakJWT", reflect.TypeOf((*MockKVStore)(nil).StoreKeycloakJWT), arg0)
}
